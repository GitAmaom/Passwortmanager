package de.passwordmanager.controllers;

import de.passwordmanager.entities.GeneratorSetting;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

/**
 * Controller class of the "Passwordsettings".
 * 
 * @author Moritz Schneider
 *
 */
public class PasswordsettingsController {

    /**
     * Spinner for entering the number of chars generated by the password generator.
     */
    @FXML
    private Spinner<Integer> numOfCharsSpinner;

    /**
     * CheckBox for enabling upperase letters.
     */
    @FXML
    private CheckBox upperCaseCheckBox;
    
    /**
     * CheckBox for enabling lowercase letters.
     */
    @FXML
    private CheckBox lowerCaseCheckBox;
    
    /**
     * CheckBox for enabling own characters.
     */
    @FXML
    private CheckBox ownCharactersCheckBox;
    
    /**
     * CheckBox for enabling digits.
     */
    @FXML
    private CheckBox digitsCheckBox;
    
    /**
     * CheckBox for enabling special characters.
     */
    @FXML
    private CheckBox specialCharactersCheckBox;

    /**
     * TextField for entering the name of the password generator profile.
     */
    @FXML
    private TextField profileNameTextField;
    
    /**
     * TextField for entering own characters for the password generator.
     */
    @FXML
    private TextField ownCharactersTextField;

    /**
     * Button for discarding changes made to the password generator profile.
     */
    @FXML
    private Button discardChangesButton;
    
    /**
     * Button for accepting changes made to the password generator profile.
     */
    @FXML
    private Button acceptChangesButton;

    /**
     * The setting currently being edited.
     */
    private GeneratorSetting setting;
    
    /**
     * SpinnerValueFactory for entering numbers between 0 and 100.
     */
    private final SpinnerValueFactory<Integer> numbers = new SpinnerValueFactory.IntegerSpinnerValueFactory(
            0, 100, 20);

    /**
     * Initializes the Controller.
     */
    public void initialize() {
        this.ownCharactersTextField.editableProperty()
                .bind(this.ownCharactersCheckBox.selectedProperty());
        this.numOfCharsSpinner.setValueFactory(numbers);
    }

    /**
     * Sets the setting.
     * @param setting the setting.
     */
    public void setSetting(GeneratorSetting setting) {
        this.setting = setting;
    }

    /**
     * Updates the controls of the view.
     */
    public void updateControls() {
        if (this.setting != null) {
            this.profileNameTextField.setText(this.setting.getName());
            this.numbers.setValue(this.setting.getNumberOfChars());
            this.upperCaseCheckBox
                    .setSelected(this.setting.getUpperCaseSelected());
            this.lowerCaseCheckBox
                    .setSelected(this.setting.getLowerCaseSelected());
            this.digitsCheckBox.setSelected(this.setting.getDigitsSelected());
            this.specialCharactersCheckBox
                    .setSelected(this.setting.getSpecialCharactersSelected());
            this.ownCharactersCheckBox
                    .setSelected(this.setting.getOwnCharactersSelected());
            this.ownCharactersTextField
                    .setText(this.setting.getOwnCharactersText());
        }
    }

    /**
     * Saves the changes made to the setting.
     */
    private void saveSetting() {
        this.setting.setName(this.profileNameTextField.getText());
        this.setting.setNumberOfChars(this.numbers.getValue());
        this.setting.setUpperCaseSelected(this.upperCaseCheckBox.isSelected());
        this.setting.setLowerCaseSelected(this.lowerCaseCheckBox.isSelected());
        this.setting.setDigitsSelected(this.digitsCheckBox.isSelected());
        this.setting.setSpecialCharactersSelected(
                this.specialCharactersCheckBox.isSelected());
        this.setting.setOwnCharactersSelected(
                this.ownCharactersCheckBox.isSelected());
        this.setting
                .setOwnCharactersText(this.ownCharactersTextField.getText());
    }

    /**
     * Accepts the changes made to the setting and closes the window.
     * @param event the ActionEvent.
     */
    @FXML
    private void acceptChangesButtonClick(ActionEvent event) {
        this.saveSetting();
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.hide();
    }

    /**
     * Discards the changes made to the setting and closes the window.
     * @param event the ActionEvent.
     */
    @FXML
    private void discardChangesButtonClick(ActionEvent event) {
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.hide();
    }
}
