package de.passwordmanager.controllers;

import java.io.File;

import de.passwordmanager.entities.GeneratorSetting;
import de.passwordmanager.helpers.ClipboardHelper;
import de.passwordmanager.helpers.PasswordHelper;
import de.passwordmanager.services.ApplicationService;
import de.passwordmanager.services.GeneratorSettingListJAXB;
import de.passwordmanager.services.ProfileService;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.util.StringConverter;

/**
 * Controller class of the "Passwordgenerator".
 * 
 * @author Moritz Schneider
 *
 */

public class PasswordgeneratorController {

    /**
     * HBox containing the confirmButton and cancelButton.
     */
    @FXML
    private HBox dialogHBox;

    /**
     * TextField containing the generated password.
     */
    @FXML
    private TextField generatedPasswordTextField;

    /**
     * Button for copying the password to the clipboard.
     */
    @FXML
    private Button copyToClipboardButton;

    /**
     * Button for generating a new password.
     */
    @FXML
    private Button generatePasswordButton;

    /**
     * Button for adding a new password generator profile.
     */
    @FXML
    private Button addProfileButton;

    /**
     * Button for removing the selected password generator profile.
     */
    @FXML
    private Button removeProfileButton;

    /**
     * Button for confirming the generated password.
     */
    @FXML
    private Button confirmButton;

    /**
     * Button for canceling.
     */
    @FXML
    private Button cancelButton;

    /**
     * Button for saving changes made to the selected profile.
     */
    @FXML
    private Button saveSettingButton;

    /**
     * Spinner containing the number of characters that will be generated by the passwordgenerator.
     */
    @FXML
    private Spinner<Integer> numOfCharsSpinner;

    /**
     * CheckBox for enabling upperase letters.
     */
    @FXML
    private CheckBox upperCaseCheckBox;

    /**
     * CheckBox for enabling lowercase letters.
     */
    @FXML
    private CheckBox lowerCaseCheckBox;

    /**
     * CheckBox for enabling own characters.
     */
    @FXML
    private CheckBox ownCharactersCheckBox;

    /**
     * CheckBox for enabling digits.
     */
    @FXML
    private CheckBox digitsCheckBox;

    /**
     * CheckBox for enabling special characters.
     */
    @FXML
    private CheckBox specialCharactersCheckBox;

    /**
     * TextField for entering the name of the password generator profile.
     */
    @FXML
    private TextField profileNameTextField;

    /**
     * TextField for entering own characters for the password generator.
     */
    @FXML
    private TextField ownCharactersTextField;

    /**
     * ChoiceBox for selecting a password generator profile.
     */
    @FXML
    private ChoiceBox<GeneratorSetting> profileChoiceBox;

    /**
     * Profileservice managing the password generator profiles.
     */
    private ProfileService profiles;
    
    /**
     * ApplicationService for spawning windows.
     */
    private ApplicationService applications;

    /**
     * The generated password as a String.
     */
    private String password;

    /**
     * SpinnerValueFactory for the number of chars spinner. Currently generates number between 0 and 100.
     */
    private final SpinnerValueFactory<Integer> numbers = new SpinnerValueFactory.IntegerSpinnerValueFactory(
            0, 100, 20);

    /**
     * Initializes the controller.
     */
    public void initialize() {
        this.dialogHBox.setVisible(false);
        this.dialogHBox.setManaged(false);
        this.password = "";
        this.generatedPasswordTextField.setEditable(false);
        this.generatedPasswordTextField.setText("");
        this.numOfCharsSpinner.setValueFactory(numbers);
        this.ownCharactersTextField.editableProperty()
                .bind(this.ownCharactersCheckBox.selectedProperty());

        if (this.profiles == null) {
            this.profiles = new ProfileService();
        }

        if (this.profileChoiceBox.getConverter() == null) {
            StringConverter<GeneratorSetting> converter = new StringConverter<GeneratorSetting>() {
                @Override
                public String toString(GeneratorSetting setting) {
                    return setting != null ? setting.getName() : null;
                }

                @Override
                public GeneratorSetting fromString(String string) {
                    return null;
                }
            };
            this.profileChoiceBox.setConverter(converter);
        }
        reload();
        this.profileChoiceBox.getSelectionModel().selectFirst();
        this.profileChoiceBox.getSelectionModel().selectedItemProperty()
                .addListener(e -> switchProfile());
        checkDisable();
        fillFields();

    }

    /**
     * Sets the dialog HBox visible or not.
     * @param value boolean value for setting the dialog HBox visible or not.
     */
    public void enableButtons(boolean value) {
        this.dialogHBox.setVisible(value);
        this.dialogHBox.setManaged(value);
    }

    /**
     * Injects the ApplicationService.
     * @param applications the ApplicationService.
     */
    public void injectApplicationService(ApplicationService applications) {
        this.applications = applications;
    }

    /**
     * Gets the ProfileService.
     * @return the ProfileService.
     */
    public ProfileService getProfileService() {
        return this.profiles;
    }

    /**
     * Gets the password.
     * @return the password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Gets the currently selected password generator profile.
     * @return the currently selected passwordgenerator profile, a GeneratorSettting object.
     */
    public GeneratorSetting getSelectedProfile() {
        return this.profileChoiceBox.getValue();
    }

    /**
     * Adds a password generator profile.
     */
    @FXML
    private void addProfileButtonClick() {
        this.profiles.createNewProfile();
        this.profileChoiceBox.getSelectionModel().selectLast();
    }

    /**
     * Removes the currently selected password generator profile.
     */
    @FXML
    private void removeProfileButtonClick() {
        GeneratorSetting toRemove = this.profileChoiceBox.getValue();
        if (this.profileChoiceBox.getSelectionModel().getSelectedIndex() != 0) {
            this.profileChoiceBox.getSelectionModel().selectPrevious();
        } else {
            this.profileChoiceBox.getSelectionModel().selectNext();
        }
        this.profiles.removeProfile(toRemove);
    }

    /**
     * Generates a password.
     */
    @FXML
    private void generatePasswordButtonClick() {
        this.generatedPasswordTextField.setText(generatePassword());
    }

    /**
     * Sets the password and closes the window.
     */
    @FXML
    private void confirmButtonClick() {
        this.password = generatedPasswordTextField.getText();
        this.confirmButton.getScene().getWindow().hide();
    }

    /**
     * Closes the window without setting the password.
     */
    @FXML
    private void cancelButtonClick() {
        this.cancelButton.getScene().getWindow().hide();
    }

    /**
     *  Copies the generated password to clipboard.
     */
    @FXML
    private void copyToClipboardButtonClick() {
        this.generatedPasswordTextField.requestFocus();
        this.generatedPasswordTextField.selectAll();
        ClipboardHelper.setClipboard(this.generatedPasswordTextField.getText());
    }

    /**
     * Saves the changes made to the selected password generator profile.
     */
    @FXML
    private void saveSetting() {
        if (this.profileChoiceBox.getSelectionModel().getSelectedItem() != null) {
            GeneratorSetting setting = this.profileChoiceBox.getSelectionModel().getSelectedItem();
            setting.setName(this.profileNameTextField.getText());
            setting.setNumberOfChars(this.numbers.getValue());
            setting.setUpperCaseSelected(this.upperCaseCheckBox.isSelected());
            setting.setLowerCaseSelected(this.lowerCaseCheckBox.isSelected());
            setting.setDigitsSelected(this.digitsCheckBox.isSelected());
            setting.setSpecialCharactersSelected(this.specialCharactersCheckBox.isSelected());
            setting.setOwnCharactersSelected(this.ownCharactersCheckBox.isSelected());
            setting.setOwnCharactersText(this.ownCharactersTextField.getText());

            reload();
        }
    }

    /**
     * Reloads the profile ChoiceBox. Important when the name of the profile is changed. Serializes the profile into an xml file.
     */
    private void reload() {
        GeneratorSetting setting = this.profileChoiceBox.getSelectionModel().getSelectedItem();
        this.profileChoiceBox.setItems(FXCollections.observableArrayList()); // empties
                                                                             // the
                                                                             // list
        this.profileChoiceBox.setItems(this.profiles.getProfiles()); // sets the
                                                                     // list
        this.profileChoiceBox.getSelectionModel().select(setting);

        File file = new File("profiles.xml");
        new GeneratorSettingListJAXB().marshall(profiles.getProfilesList(), file); // serializes the
                                                                                   // list
    }

    /**
     * Gets called when a profile is switched. Checks if the profile is editable and fills the fields.
     */
    private void switchProfile() {
        this.checkDisable();
        this.fillFields();
    }

    /**
     * Checks if the profile is editable and disables the fields if it isn't.
     */
    private void checkDisable() {
        if (this.profileChoiceBox.getSelectionModel().getSelectedItem() != null) {
            this.removeProfileButton.setDisable(!this.profileChoiceBox.getSelectionModel()
                    .getSelectedItem().getEditableProperty().get());
        }
    }

    /**
     * Fills the fields with the password generator profile values.
     */
    private void fillFields() {
        if (this.profileChoiceBox.getSelectionModel().getSelectedItem() != null) {
            GeneratorSetting setting = this.profileChoiceBox.getSelectionModel().getSelectedItem();
            this.profileNameTextField.setText(setting.getName());
            this.numOfCharsSpinner.getValueFactory().setValue(setting.getNumberOfChars());
            this.upperCaseCheckBox.setSelected(setting.getUpperCaseSelected());
            this.lowerCaseCheckBox.setSelected(setting.getLowerCaseSelected());
            this.digitsCheckBox.setSelected(setting.getDigitsSelected());
            this.specialCharactersCheckBox.setSelected(setting.getSpecialCharactersSelected());
            this.ownCharactersCheckBox.setSelected(setting.getOwnCharactersSelected());
            this.ownCharactersTextField.setText(setting.getOwnCharactersText());

            boolean isDisabled = !setting.isEditable();
            this.profileNameTextField.setDisable(isDisabled);
            this.numOfCharsSpinner.setDisable(isDisabled);
            this.upperCaseCheckBox.setDisable(isDisabled);
            this.lowerCaseCheckBox.setDisable(isDisabled);
            this.digitsCheckBox.setDisable(isDisabled);
            this.specialCharactersCheckBox.setDisable(isDisabled);
            this.ownCharactersCheckBox.setDisable(isDisabled);
            this.ownCharactersTextField.setDisable(isDisabled);
            this.saveSettingButton.setDisable(isDisabled);
        }
    }

    /**
     * Generates a password using the selected password generator profile.
     * @return the password as a String.
     */
    private String generatePassword() {
        GeneratorSetting setting = profileChoiceBox.getValue();
        return PasswordHelper.generatePassword(setting);
    }
}
